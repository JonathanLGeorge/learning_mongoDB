inside MongoDB\server\4.4\bin
run mongo
this will start up our database as a service 

//show databases
show dbs

//to exit 
run exit




//to import files 
mongoimport.exe --db cooker examples.json 
//cooker is the name we are making up, examples is the file we are useing 


//use the database
use nameOfDatabase

//show collection
show collections;



what are documents?
they are Field-value pairs
they are stored in JSON-like BSON

create a doc variable
doc = {"title": "Tacos", "desc": "Yummie tacos", "cook_time": 20};

run db.tacos.insertOne(doc)

/*
> db.tacos.insertOne(doc)
{
        "acknowledged" : true,
        "insertedId" : ObjectId("6003e87fc3ff9b5cfeeca23a")
}
*/


lets see what our document looks like 

db.tacos.find()
/*
{ "_id" : ObjectId("6003e87fc3ff9b5cfeeca23a"), "title" : "Tacos", "desc" : "Yummie tacos", "cook_time" : 20 }
*/

use db.tacos.find().pretty() for a formated output :D



////
find
////
.find()
.find({"key": "value"}) ex: {"title":"Tacos"}
you can add multiple conditional. ex {"title":"Tacos", "cook_time": 20}
notice they are both in the same {}

you can give multiple parameters though .find({},{})

bd.recopes.find({"title":"Tacos"}, {"title": 1}).pretty(); //here 1 = true, 0 = false
you can use this trick to include or exclude things from your query 

lets say you just want back documents with just their titles...

bd.recopes.find({}, {"title": 1}).pretty(); //you send that empty query with the title

what about partial title? you arent always going to know the full title
regular expressions are used

bd.recopes.find({"title": {$regex: /taco/i}}, {"title": 1}) //i is for case insenitive, these are javascrip regular expression comands



collections

 db.getName() //tells you the database you are in 
 show dbs //shows you the databases
 show collections // shows you the collections in the database you are in 

to create a collection inside a database
db.name_of_collection_you_want_to_create.insertOne({})

show collections and you will see it 

to create subcollection 
db.name_of_collection_you_want_to_create.name_of_sub_collection.insertOne({})
this really store the same way but can be helpfull for query puropses 



.limit()
limits the number of results returned

.count()
returns the number of results in collection 

.sort({"key or field you wantt o sort by": value which is the direction 1,-1})
1 assending -1 decending 
this is sorting the value in order not the key

.skip(6)
you skip the key value pair in the collection by x


operators and arrays
$gt = >  
$lt = <
$lte = <=
$or = or || 
simply using a "," in the collection query works like "&& and"

lets say you want to find info in a collection thats inside an arrays
use $all
db.recipes.find({tags: {$all: ["easy", "quick"]}}, {"title": 1, "tags": 1});

this will only return collections that have both easy and quick though
to get easy or quick we use $in

db.recipes.find({tags: {$ain: ["easy", "quick"]}}, {"title": 1, "tags": 1});

if we want to reach inside an array of objects then we need to use dot notation

db.recipes.find({"ingredients.name": "egg"}, {"title":1});
example output:
{"_id": ObjectId("4fds456f4e5a64sdf56ew5f4a"), "title": "Pancakes"}
{"_id": ObjectId("4fgfsf456f4ehhghghre16egf"), "title": "Omlete"}


update and delete documents

we might want to change in database schema user updates a pofile correvt spelling error ect...

$set 

example data 
{"_id": ObjectId("4fds456f4e5a64sdf56ew5f4a"), "title": "Pancakes"}
{"_id": ObjectId("4fgfsf456f4ehhghghre16egf"), "title": "Omlete"}

we want to change pancakes to waffles
we will updateOne and then use $set
db.examples.updateOne({"title": "Pancakes"}, {$set: {"title": "Waffles"}})

if you try to set a feild that didnt exist, then mongo will insert a new waffle in this case into the collection 

$unset

lets say we have a collection object with multiple feilds and we want to remove one of them 

{"_id": ObjectId("4fds456f4e5a64sdf56ew5f4a"), "title": "Pancakes", "breakfast_only": false}

use unset
db.examples.updateOne({"title": "Pancakes"}, {$unset: {"breakfast_only": 1}}) //1 for true

this will remove the "breakfast_only" field in the example

$inc
increment a field. super useful

db.examples.updateOne({"title": "Tacos"},{$inc: {"likes_count": 1}} //-1 works too

this will lead to whats called Eventual Consistancy 
*Guarentee the field will always increase or decrese by the proper ammount
*this is an Atomic operation, we arent checking the value just updating it 
*there are no locks or transaction with a query... 


updating and modifying arrays 

$push
$pull
db.examples.updateOne({"title": "Tacos", {$push: {"likes_id":60}}} //added 60 id to likes_id
db.examples.updateOne({"title": "Tacos", {$pull: {"likes_id":60}}} //removed 60 from likes_id

how to delet documents
deleteOne
deletMany

db.examples.deleteOne({"_id": ObjectId("4fds456f4e5a64sdf56ew5f4a")})





////////////////////////////
one to many example
lets say we have a recipe but many comment on the recipe.
we may not want to store those coments in the recipe document
we can store the comments in a seperate collectio 
we can have lets say a top comments in the recipe... and we grab the comments as they change.


you should ask... will your data change...

///////////
basic indexes
////////////
lets look at // explain("executionStats");
db.recipes.find({title: "Tacos"}, {"title"}).explain("executionStats");

this will return all the querys that go on in the background... 

if we create an index on recipes. we can dramatically shorten the run time it takes to query this info

HOT TIP
type db.nameofecollection and then TAB key twice... space bar to to scroll muiltiple pages..
this will bring up a list of comands

to know your indexes on a colection
db.nameofcollection.getIndexes()

the first lising is created by mongo 
_id will be in a name feild

how do we create an index?
bd.nameofcollection.createIndex({"name_of_index": 1}) //1 = assending


to remove an index 
bd.collectionName.dropIndex("name_of_index_1")